#+Title: Emacs Config
#+Author: Patrick Lee 
#+email: leepatrick338@gmail.com
#+PROPERTY: header-args :tangle ./init.el


* Index :TOC:
- [[#introduction][Introduction]]
- [[#key-global-configurations][Key global configurations]]
  - [[#package-manager][Package Manager]]
  - [[#emacs-configuration][Emacs Configuration]]
  - [[#undo-tree][Undo-tree]]
  - [[#which-key][Which Key]]
  - [[#evil][EVIL]]
  - [[#dirvish][Dirvish]]
- [[#design-scheme][Design scheme]]
  - [[#color-scheme][Color scheme]]
  - [[#auto-toc-maker][Auto TOC maker]]
  - [[#line][Line]]
  - [[#org-bullets][Org bullets]]
  - [[#beacon][Beacon]]
  - [[#dashboard][Dashboard]]
- [[#usefull-shit][Usefull shit]]
  - [[#tree-sitter][Tree-sitter]]
  - [[#powerthesaurus][Powerthesaurus]]
  - [[#pdf-tools][PDF-Tools]]
  - [[#yasnippets][Yasnippets]]
  - [[#ivy][IVY]]
  - [[#vterm-stuff][VTerm stuff]]
  - [[#rainbow-mode][Rainbow mode]]
- [[#language-modes][Language modes]]
  - [[#lsp-mode][LSP-Mode]]
  - [[#latex-mode][Latex Mode]]

* Introduction
This is a straight.el and somewhat minimal installation of emacs.
It does not use any kind of framework, and every package is imported through
use-package
* Key global configurations

In this section I configure key parts of my config file
** Package Manager

I Use Straight.el as it works well, and is declarative which is something I very much do like

#+begin_src emacs-lisp
  (defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        (or (bound-and-true-p straight-base-dir)
            user-emacs-directory)))
      (bootstrap-version 7))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
** Emacs Configuration
This are some defaults I have shamelessly stolen from  https://github.com/LionyxML/emacs-kick
They have some nice stuff, I've read everything.

#+begin_src emacs-lisp
  (setq gc-cons-threshold #x40000000)
  (setq read-process-output-max (* 1024 1024 4))
       (column-number-mode t)                                                    
  (display-line-numbers-mode)
  (setq display-line-numbers-type 'relative)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (use-package org-auto-tangle)
  (add-hook 'org-mode-hook 'org-auto-tangle-mode)
  (setq org-auto-tangle-default t)
  (add-hook 'org-src-mode-hook 'prog-mode)
  (global-set-key [escape] 'keyboard-escape-quit)
#+end_src

** Undo-tree
#+begin_src emacs-lisp
  (use-package undo-tree)
(global-undo-tree-mode)
#+end_src

** Which Key
This should be removed in Emacs 30.x

#+begin_src emacs-lisp
  (use-package which-key)
  (which-key-mode)
#+end_src
** EVIL
It is very important

#+begin_src emacs-lisp
  (use-package goto-chg)
  (setq evil-want-keybinding nil)
    (use-package evil
      :init (evil-mode +1)
      :config
      (eval-when-compile (require 'evil))
      (setq evil-auto-indent t
            evil-ex-complete-emacs-commands t
            evil-undo-system 'undo-tree
            evil-undo-function 'undo-tree-undo
            evil-redo-function 'undo-tree-redo
            evil-magic 'very-magic
            evil-search-module 'evil-search
            evil-shift-width 2
            evil-toggle-key "C-M-z"
            evil-want-C-w-delete nil
            evil-want-C-w-in-emacs-state nil
            evil-want-fine-undo t
            evil-normal-state-cursor '(box "white")
            evil-operator-state-cursor '(box "white")
            evil-replace-state-cursor '(box "white")
            evil-insert-state-cursor `(box "white")
            evil-emacs-state-cursor `(box "white"))(use-package evil))
    (setq scroll-margin 8
          scroll-conservatively 101)
  (use-package evil-surround)
  (global-evil-surround-mode 1)
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))
  (use-package evil-org
  :after org
  :hook (org-mode . (lambda () evil-org-mode))
  :config
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
  (electric-pair-mode 1)
#+end_src
** Dirvish
#+begin_src emacs-lisp
      (use-package nerd-icons)
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    :config
    (setq dirvish-mode-line-format
          '(:left (sort symlink) :right (omit yank index)))
    (setq dirvish-mode-line-height 10)
    (setq dirvish-attributes
          '(nerd-icons file-time file-size collapse subtree-state vc-state git-msg))
    (setq dirvish-subtree-state-style 'nerd)
    (setq delete-by-moving-to-trash t)
    (setq dirvish-path-separators (list
                                   (format "  %s " (nerd-icons-codicon "nf-cod-home"))
                                   (format "  %s " (nerd-icons-codicon "nf-cod-root_folder"))
                                   (format " %s " (nerd-icons-faicon "nf-fa-angle_right"))))
    (setq dired-listing-switches
          "-l --almost-all --human-readable --group-directories-first --no-group")
    (dirvish-peek-mode) ; Preview files in minibuffer
    (dirvish-side-follow-mode) ; similar to `treemacs-follow-mode'
  )
#+end_src
* Design scheme
In this section the global configuration for colors and stuff among those lines is made.
** Color scheme
In this section I make it so Emacs uses catppuccin
I disable the scroll bar, tool bar and menu bar
 #+begin_src emacs-lisp
   (use-package catppuccin-theme)
   (load-theme 'catppuccin :no-confirm)
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (defcustom ek-use-nerd-fonts t
     "Configuration for using Nerd Fonts Symbols."
     :type 'boolean
     :group 'appearance)
   (use-package rainbow-delimiters)
   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
 #+end_src

** Auto TOC maker

#+begin_src emacs-lisp
(use-package toc-org)
(add-hook 'org-mode-hook 'toc-org-mode)

      ;; enable in markdown, too
     ;; (add-hook 'markdown-mode-hook 'toc-org-mode)
     ;;(define-key markdown-mode-map (kbd "\C-c\C-o") 'toc-org-markdown-follow-thing-at-point)
#+end_src

** Line

#+begin_src emacs-lisp
  (use-package doom-modeline
  :init (doom-modeline-mode 1))
  (use-package nyan-mode)
  (nyan-mode 1)
#+end_src

** Org bullets
They look nice

#+begin_src emacs-lisp
  (use-package org-bullets)
  (add-hook 'org-mode-hook
  (lambda ()
  (org-bullets-mode 1)
  (org-indent-mode 1)
  (visual-line-mode 1)
  ))
#+end_src


** Beacon
#+begin_src emacs-lisp
(use-package beacon)
(beacon-mode 1)
#+end_src

** TODO Dashboard
Sources for the images
1. https://github.com/egstatsml/emacs_fancy_logos/blob/main/gnu_color.png
2. https://github.com/jeetelongname/doom-banners/blob/master/splashes/emacs/M-x_butterfly.png
3. https://github.com/jeetelongname/doom-banners/blob/master/splashes/others/emacs-logo-vim.png
#+begin_src emacs-lisp
                (use-package dashboard
              :config
            (dashboard-setup-startup-hook))
          (setq initial-buffer-choice (lambda () (get-buffer-create dashboard-buffer-name)))
        (setq dashboard-banner-logo-title "Welcome to bloody Emacs")
        (setq dashboard-startup-banner '("/home/jacobarch/assets/emacs-logo-vim.png" "/home/jacobarch/assets/M-x_butterfly.png" "/home/jacobarch/assets/gnu_color.png"))
      (setq dashboard-display-icons-p t)     ; display icons on both GUI and terminal
      (setq dashboard-icon-type 'nerd-icons) ; use `nerd-icons' package
    (add-to-list 'doom-modeline-mode-alist '(dashboard-mode))
#+end_srC

* Usefull shit
** Tree-sitter
This makes it so colorschemes are applied to files

#+begin_src emacs-lisp
  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)
  (setq org-src-fontify-natively t)
#+end_src
** Powerthesaurus
Masochism

#+begin_src emacs-lisp
(use-package powerthesaurus)
#+end_src
** PDF-Tools
Needed for Latex-mode
#+begin_src emacs-lisp
(use-package pdf-tools)
#+end_src
** Yasnippets
This section has the snippets and the snippet library and the snippets library
I have added Doom's snippets (long ahh list)
And yasnippet-snippets

#+begin_src emacs-lisp
    (use-package yasnippet)
    (setq yas-snippet-dirs
  '("~/.config/emacs/snippets"))
  (yas-global-mode 1)
  (use-package yasnippet-snippets)
  (use-package doom-snippets
  :after yasnippet
  :straight (doom-snippets :type git :host github :repo "doomemacs/snippets" :files ("*.el" "*")))
#+end_src
** IVY
Copied straight from DT
https://gitlab.com/dwt1/configuring-emacs/-/blob/main/03-shells-terms-and-theming/config.org_
It works, I like how it looks
That's good enough.
#+begin_src emacs-lisp
(use-package all-the-icons)
  (use-package counsel
    :after ivy
    :diminish
    :config 
      (counsel-mode)
      (setq ivy-initial-inputs-alist nil)) ;; removes starting ^ regex in M-x

  (use-package ivy
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :diminish
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
     ivy-rich-switch-buffer-align-virtual-buffer t
     ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
#+end_src
** VTerm stuff
*** Vterm itself
This sets zsh as my default shell for all (except eshell) terms in emacs as well as a 50 thousand scrollback
#+begin_src emacs-lisp
    (use-package vterm)
    (setq shell-file-name "/usr/bin/zsh"
  vterm-max-scrollback (* 50 1000))
#+end_src
*** Vterm-Toggle
#+begin_src emacs-lisp
  (use-package vterm-toggle
    :after vterm
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (setq vterm-toggle-scope 'project)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                       (let ((buffer (get-buffer buffer-or-name)))
                         (with-current-buffer buffer
                           (or (equal major-mode 'vterm-mode)
                               (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                    (display-buffer-reuse-window display-buffer-at-bottom)
                    ;;(display-buffer-reuse-window display-buffer-in-direction)
                    ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                    ;;(direction . bottom)
                    ;;(dedicated . t) ;dedicated is supported in emacs27
                    (reusable-frames . visible)
                    (window-height . 0.3))))
#+end_src
** Rainbow mode
#+begin_src emacs-lisp
      (use-package rainbow-mode
    :hook
  ((org-mode prog-mode) . rainbow-mode))
#+end_src
* Language modes
** LSP-Mode
Doom uses this, instead of eglot
I just think it works better
#+begin_src emacs-lisp
(use-package lsp-mode
  :init
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  (setq lsp-keymap-prefix "C-c l")
  :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
         (emacs-lisp-mode . lsp)
         ;; if you want which-key integration
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)
;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are helm user
;(use-package helm-lsp :commands helm-lsp-workspace-symbol)
;; if you are ivy user
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src
** Latex Mode
In this mode I define
- CDlatex, a framework to write math expressions in emacs
-  AucTex a package that does a lot, including previewing latex and formatting
- xenops it just makes writing latex comfier
- latexmk
#+begin_src emacs-lisp
  (use-package auctex)
  (use-package xenops)
  (use-package cdlatex)
  (use-package evil-tex)
#+end_src
